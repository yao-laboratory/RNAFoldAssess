import os


class RNAStructure:
    # If you're on the HCC Swan cluster, make sure you've run
    #     module load rnastructure
    # because we'll use `Fold`, which comes from that package.
    # You also need to make sure the `DATAPATH` envar is set by
    # running
    #     export DATAPATH=/util/opt/anaconda/deployed-conda-envs/packages/rnastructure/envs/rnastructure-6.1/share/rnastructure/data_tables
    # Also note that this method can take a constraint file
    # generated by either DMS or SHAPE data. It is not required
    # though and as of right now, I'm not going to use it because
    # not every dataset will have reactivity data.

    def __init__(self):
        self.output = ""
        self.path_to_ct_file = ""

    def execute(self, seq_file, output_path_base="/common/yesselmanlab/ewhiting/reports/rnastructure_ct_outputs", additional_output_dir=None):
        # Don't need path if it's `module load`ed
        # path_to_fold = os.path.abspath(path)
        path_to_fold = "Fold"
        sfile_name = os.path.basename(seq_file)
        ct_name = f"{sfile_name.split(".")[0]}.ct"
        if additional_output_dir:
            destination = f"{output_path_base}/{additional_output_dir}/{ct_name}"
        else:
            destination = f"{output_path_base}/{ct_name}"
        exec_string = f"{path_to_fold} --MFE {os.path.abspath(seq_file)} {destination}"
        self.path_to_ct_file = destination
        self.output = os.popen(exec_string).read()
        try:
            os.remove(seq_file)
        except FileNotFoundError:
            print(f"RNAStructure: Couldn't find {seq_file} files to delete")

    def get_ss_prediction(self):
        # The one loaded by `module load viennarna` hangs
        ct2db_path_string = "/home/yesselmanlab/ewhiting/ViennaRNA/bin/ct2db"
        exec_string = f"{ct2db_path_string} {self.path_to_ct_file}"
        output = os.popen(exec_string).read()
        strings = output.split("\n")
        ss = strings[2]
        return ss

    def get_mfe(self):
        f = open(self.path_to_ct_file)
        data = f.readlines()
        f.close()
        first_line = data[0]
        strings = first_line.split()
        mfe = strings[3]
        return float(mfe)

