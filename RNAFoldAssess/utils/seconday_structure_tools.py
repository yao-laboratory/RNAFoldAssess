import os


class SecondaryStructureTools:
    asterisks  = "*" * 76
    ss_string = "Secondary structures"

    @staticmethod
    def parse_secondary_structure_file(path):
        # This parses a file generated by the x3dna-dssr tool. That tool takes
        # a PDB file and generates a file containing much information about
        # secondary structure. This method parses that file and returns a dictionary
        # containing the PDB name, molecule sequence, whole secondary structure,
        # and an array of chains with their ID, sequence, and secondary structure.
        f = open(path)
        raw_data = f.read()
        data = raw_data.split(SecondaryStructureTools.asterisks)
        ss_data = None
        for d in data:
            if SecondaryStructureTools.ss_string in d:
                ss_data = d
                break
        if not ss_data:
            raise SecondaryStructureToolsException(f"No secondary structure in {path}")
        ss_data = ss_data.split("\n")
        whole_seq = ""
        whole_structure = ""
        chains = []
        for i in range(len(ss_data)):
            if "[whole]" in ss_data[i]:
                whole_seq = ss_data[i+1]
                whole_structure = ss_data[i+2]
            if "[chain]" in ss_data[i]:
                chain_id = ss_data[i].split("-")[1].split(" ")[0]
                chains.append({
                    "chain_id": chain_id,
                    "sequence": ss_data[i+1],
                    "structure": ss_data[i+2]
                })
        return {
            "name": path.split(".")[0].split("/")[-1],
            "sequence": whole_seq,
            "structure": whole_structure,
            "chains": chains
        }

    @staticmethod
    def symmetric_chain(dbn, count_square_brackets=False):
        if count_square_brackets:
            dbn = dbn.replace("[", "(").replace("]", ")")
        return dbn.count("(") == dbn.count(")")

    @staticmethod
    def contains_pseudoknots(dbn):
        return ("[" in dbn or "]" in dbn)


class SecondaryStructureToolsException(Exception):
    pass
